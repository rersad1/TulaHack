import React, { useState, useEffect, useMemo } from 'react';
import { Link } from 'react-router-dom';
import axios from 'axios'; // Assuming axios is installed and configured for API calls
// import { FiFilter, FiBriefcase, FiUser, FiGrid, FiSearch, FiHome } from 'react-icons/fi'; // –ü—Ä–∏–º–µ—Ä –∏–∫–æ–Ω–æ–∫

function VolunteerDashboard() { // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö
    const [filterCategory, setFilterCategory] = useState('all');
    const [filterLocationType, setFilterLocationType] = useState('all');
    const [tasks, setTasks] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    // –°—Ç–∏–ª–∏
    const buttonClass = "flex min-w-[84px] max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-xl h-10 px-4 bg-[#1980e6] text-white text-sm font-bold leading-normal tracking-[0.015em] hover:bg-blue-700 transition-colors duration-200";
    const cardClass = "block bg-white border border-gray-200 rounded-xl p-4 md:p-6 hover:shadow-md transition-shadow duration-200 mb-4";

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    useEffect(() => {
        const fetchTasks = async () => {
            setLoading(true);
            setError(null);
            try {
                // –ó–∞–º–µ–Ω–∏—Ç–µ '/api/tasks' –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
                // const response = await api.get('/api/tasks');
                // setTasks(response.data.filter(task => task.status === 'OPEN') || []);

                // –ó–∞–≥–ª—É—à–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                const mockTasks = [
                    { id: 1, title: "–ü–æ–º–æ—â—å —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏", description: "–ù—É–∂–Ω–æ –∫—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ–∂–∏–ª–æ–º—É —á–µ–ª–æ–≤–µ–∫—É", status: 'OPEN', category: 'SOCIAL', locationType: 'OFFLINE', userEmail: 'user1@example.com' },
                    { id: 2, title: "–£–±–æ—Ä–∫–∞ –ø–∞—Ä–∫–∞", description: "–°—É–±–±–æ—Ç–Ω–∏–∫ –≤ –ø–∞—Ä–∫–µ '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π'", status: 'OPEN', category: 'ECOLOGY', locationType: 'OFFLINE', userEmail: 'user2@example.com' },
                    { id: 3, title: "–û–Ω–ª–∞–π–Ω-—É—Ä–æ–∫ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ", description: "–ü–æ–º–æ—â—å —à–∫–æ–ª—å–Ω–∏–∫—É —Å –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ–º", status: 'OPEN', category: 'EDUCATION', locationType: 'ONLINE', userEmail: 'user3@example.com' },
                    { id: 4, title: "–°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤ –±–æ–ª—å–Ω–∏—Ü—É", description: "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å –≤ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–∏ –¥–æ –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∏", status: 'OPEN', category: 'MEDICAL', locationType: 'OFFLINE', userEmail: 'user4@example.com' },
                    { id: 5, title: "–ü–æ–º–æ—â—å —Å –ø–µ—Ä–µ–µ–∑–¥–æ–º", description: "–ù—É–∂–Ω–æ –ø–æ–º–æ—á—å –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –ª–µ–≥–∫–∏–µ –≤–µ—â–∏", status: 'OPEN', category: 'OTHER', locationType: 'OFFLINE', userEmail: 'user5@example.com' },
                ];
                await new Promise(resolve => setTimeout(resolve, 500)); // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
                setTasks(mockTasks);

            } catch (err) {
                console.error("Error fetching tasks:", err);
                setError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
                setTasks([]);
            } finally {
                setLoading(false);
            }
        };
        fetchTasks();
    }, []);

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    const getStatusClass = (status) => {
        switch (status) {
            case 'OPEN': return 'bg-blue-100 text-blue-800';
            case 'IN_PROGRESS': return 'bg-yellow-100 text-yellow-800';
            case 'COMPLETED': return 'bg-green-100 text-green-800';
            case 'CANCELLED': return 'bg-red-100 text-red-800';
            default: return 'bg-gray-100 text-gray-800';
        }
    };

    const getCategoryIcon = (category) => {
        switch (category) {
            case 'SOCIAL': return 'ü§ù';
            case 'ECOLOGY': return 'üå≥';
            case 'EDUCATION': return 'üìö';
            case 'MEDICAL': return '‚öïÔ∏è';
            default: return 'üìå';
        }
    };

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á
    const filteredTasks = useMemo(() => {
        return tasks.filter(task => {
            const categoryMatch = filterCategory === 'all' || task.category === filterCategory;
            const locationMatch = filterLocationType === 'all' || task.locationType === filterLocationType;
            return categoryMatch && locationMatch; // –°—Ç–∞—Ç—É—Å —É–∂–µ OPEN –∏–∑ fetch
        });
    }, [tasks, filterCategory, filterLocationType]);

    // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç Sidebar
    const Sidebar = () => (
        <div className="flex flex-col w-64 md:w-72 bg-white p-4 border-r border-gray-200 flex-shrink-0 h-screen sticky top-0">
            <div className="flex flex-col gap-4 flex-grow">
                <div className="flex items-center gap-3 mb-4">
                    <div
                        className="bg-center bg-no-repeat aspect-square bg-cover rounded-full size-10"
                        style={{ backgroundImage: 'url("https://cdn.usegalileo.ai/sdxl10/4ac9fb50-6ae0-44b6-994d-caf00c3bdb32.png")' }}
                    ></div>
                    <span className="font-semibold">–í–æ–ª–æ–Ω—Ç–µ—Ä</span>
                </div>
                <div className="flex flex-col gap-1">
                    {/* –°—Å—ã–ª–∫–∞ –Ω–∞ —ç—Ç—É –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É (–ù–∞–π—Ç–∏ –∑–∞—è–≤–∫–∏) —Ç–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–Ω–∞ */}
                    <div className="flex items-center gap-3 px-3 py-2 rounded-lg bg-[#f0f2f4]">
                        <span className="text-gray-700">üîç</span>
                        <p className="text-[#111418] text-sm font-medium leading-normal">–ù–∞–π—Ç–∏ –∑–∞—è–≤–∫–∏</p>
                    </div>
                    {/* –°—Å—ã–ª–∫–∞ –Ω–∞ –¥—Ä—É–≥—É—é –ø–∞–Ω–µ–ª—å (–µ—Å–ª–∏ –µ—Å—Ç—å) */}
                    {/* <Link to="/volunteer-dashboard-overview" className="flex items-center gap-3 px-3 py-2 rounded-lg hover:bg-gray-100">
                        <span className="text-gray-700">üìä</span>
                        <p className="text-[#111418] text-sm font-medium leading-normal">–û–±–∑–æ—Ä</p>
                    </Link> */}
                    <Link to="/profile" className="flex items-center gap-3 px-3 py-2 rounded-lg hover:bg-gray-100">
                        <span className="text-gray-700">üë§</span>
                        <p className="text-[#111418] text-sm font-medium leading-normal">–ü—Ä–æ—Ñ–∏–ª—å</p>
                    </Link>
                </div>
            </div>
            <div className="mt-auto pt-4 border-t border-gray-200">
                <Link to="/" className="flex items-center gap-3 px-3 py-2 rounded-lg hover:bg-gray-100">
                    <span className="text-gray-700">üè†</span>
                    <p className="text-[#111418] text-sm font-medium leading-normal">–ù–∞ –≥–ª–∞–≤–Ω—É—é</p>
                </Link>
            </div>
        </div>
    );

    // –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–Ω–¥–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    return (
        <div className="relative flex size-full min-h-screen flex-row bg-gray-50 group/design-root overflow-x-hidden" style={{ fontFamily: '"Public Sans", "Noto Sans", sans-serif' }}>
            <Sidebar />
            <div className="layout-content-container flex flex-col flex-1 overflow-y-auto">
                <div className="p-4 md:p-6 lg:p-8">
                    {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
                    <div className="flex flex-wrap justify-between gap-3 mb-6">
                        <div className="flex flex-col gap-2">
                            <p className="text-[#111418] tracking-light text-2xl md:text-3xl font-bold leading-tight">–ù–∞–π—Ç–∏ –∑–∞—è–≤–∫—É</p>
                            <p className="text-[#637588] text-sm font-normal leading-normal max-w-xl">
                                –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∑–∞—è–≤–∫–∏ –æ—Ç –ª—é–¥–µ–π –≤ –≤–∞—à–µ–º —Ä–∞–π–æ–Ω–µ –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä—É–π—Ç–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–∞—à–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º.
                            </p>
                        </div>
                    </div>
                    {/* –§–∏–ª—å—Ç—Ä—ã */}
                    <div className="flex gap-2 md:gap-3 p-3 flex-wrap mb-6 border-b border-gray-200 pb-4">
                        <div className="flex h-8 shrink-0 items-center justify-center gap-x-2 rounded-xl bg-blue-100 text-blue-800 px-3 md:px-4">
                            <p className="text-sm font-medium leading-normal">–°—Ç–∞—Ç—É—Å: –û—Ç–∫—Ä—ã—Ç—ã–µ</p>
                        </div>
                        <div className="flex h-8 shrink-0 items-center justify-center gap-x-1 rounded-xl bg-[#f0f2f4] px-1 md:px-2">
                            <label htmlFor="categoryFilterTag" className="text-[#111418] text-sm font-medium leading-normal pl-2">–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</label>
                            <select
                                id="categoryFilterTag"
                                name="categoryFilterTag"
                                className="rounded-lg border-none bg-transparent focus:ring-0 text-sm font-medium"
                                value={filterCategory}
                                onChange={(e) => setFilterCategory(e.target.value)}
                            >
                                <option value="all">–í—Å–µ</option>
                                <option value="SOCIAL">–°–æ—Ü. –ø–æ–º–æ—â—å</option>
                                <option value="ECOLOGY">–≠–∫–æ–ª–æ–≥–∏—è</option>
                                <option value="EDUCATION">–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ</option>
                                <option value="MEDICAL">–ú–µ–¥. –ø–æ–º–æ—â—å</option>
                                <option value="OTHER">–î—Ä—É–≥–æ–µ</option>
                            </select>
                        </div>
                        <div className="flex h-8 shrink-0 items-center justify-center gap-x-1 rounded-xl bg-[#f0f2f4] px-1 md:px-2">
                            <label htmlFor="locationFilterTag" className="text-[#111418] text-sm font-medium leading-normal pl-2">–¢–∏–ø:</label>
                            <select
                                id="locationFilterTag"
                                name="locationFilterTag"
                                className="rounded-lg border-none bg-transparent focus:ring-0 text-sm font-medium"
                                value={filterLocationType}
                                onChange={(e) => setFilterLocationType(e.target.value)}
                            >
                                <option value="all">–í—Å–µ</option>
                                <option value="OFFLINE">–û—Ñ–ª–∞–π–Ω</option>
                                <option value="ONLINE">–û–Ω–ª–∞–π–Ω</option>
                            </select>
                        </div>
                    </div>
                    {/* –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á */}
                    <div className="space-y-4">
                        {loading ? (
                            <p className="text-[#637588] text-base text-center py-10">–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–æ–∫...</p>
                        ) : error ? (
                            <p className="text-red-600 text-base text-center py-10">{error}</p>
                        ) : filteredTasks.length > 0 ? (
                            filteredTasks.map(task => (
                                <div key={task.id} className={cardClass}>
                                    <div className="flex flex-col md:flex-row justify-between md:items-center gap-3 md:gap-4">
                                        <div className="flex-1">
                                            <div className="flex items-center mb-1">
                                                <span className="text-xl mr-2">{getCategoryIcon(task.category)}</span>
                                                <p className="text-[#111418] text-lg font-semibold leading-tight">{task.title}</p>
                                            </div>
                                            <p className="text-[#637588] text-sm font-normal ml-8">
                                                –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {
                                                    {
                                                        'SOCIAL': '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â—å',
                                                        'ECOLOGY': '–≠–∫–æ–ª–æ–≥–∏—è',
                                                        'EDUCATION': '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
                                                        'MEDICAL': '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ø–æ–º–æ—â—å',
                                                        'OTHER': '–î—Ä—É–≥–æ–µ'
                                                    }[task.category] || task.category || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
                                                }
                                            </p>
                                            <p className="text-[#637588] text-xs font-normal ml-8 mt-1">
                                                –¢–∏–ø: {task.locationType === 'ONLINE' ? '–û–Ω–ª–∞–π–Ω' : task.locationType === 'OFFLINE' ? '–û—Ñ–ª–∞–π–Ω' : '–ù–µ —É–∫–∞–∑–∞–Ω'}
                                            </p>
                                        </div>
                                        <div className="flex items-center justify-end gap-3 md:gap-4 mt-2 md:mt-0 flex-wrap">
                                            <span className={`inline-block px-3 py-1 rounded-full text-xs font-medium ${getStatusClass(task.status)}`}>
                                                {task.status}
                                            </span>
                                            <Link to={`/task/${task.id}`} className="text-[#1980e6] text-sm font-medium hover:underline whitespace-nowrap">
                                                –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                                            </Link>
                                            {/* TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏ */}
                                            <button className={`${buttonClass} h-9 px-3 text-xs whitespace-nowrap`}>
                                                –í–∑—è—Ç—å –∑–∞—è–≤–∫—É
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            ))
                        ) : (
                            <p className="text-[#637588] text-base text-center py-10">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞—è–≤–æ–∫, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º.</p>
                        )}
                    </div>
                </div>
            </div>
        </div>
    );
}

export default VolunteerDashboard; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç
